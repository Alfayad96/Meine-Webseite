<<<<<<< HEAD
/**
 * Makes a runtime module to intercept module execution for React Refresh.
 * This module creates an isolated __webpak_require__ function for each module
 * and injects a $Refresh$ object into it for use by react-refresh.
=======
const { getRefreshGlobalScope } = require('../globals');
const getRefreshGlobal = require('./getRefreshGlobal');

/**
 * Makes a runtime module to intercept module execution for React Refresh.
>>>>>>> 44a0e272c482aa743ebe582559ba22953a336edf
 * @param {import('webpack')} webpack The Webpack exports.
 * @returns {ReactRefreshRuntimeModule} The runtime module class.
 */
function makeRefreshRuntimeModule(webpack) {
  return class ReactRefreshRuntimeModule extends webpack.RuntimeModule {
    constructor() {
      // Second argument is the `stage` for this runtime module -
      // we'll use the same stage as Webpack's HMR runtime module for safety.
      super('react refresh', webpack.RuntimeModule.STAGE_BASIC);
    }

    /**
     * @returns {string} runtime code
     */
    generate() {
      const { runtimeTemplate } = this.compilation;
<<<<<<< HEAD
      const declareVar = runtimeTemplate.supportsConst() ? 'const' : 'var';
      return webpack.Template.asString([
        `${declareVar} setup = ${runtimeTemplate.basicFunction('moduleId', [
          `${declareVar} refresh = {`,
          webpack.Template.indent([
            `moduleId: moduleId,`,
            `register: ${runtimeTemplate.basicFunction('type, id', [
              `${declareVar} typeId = moduleId + " " + id;`,
              `refresh.runtime.register(type, typeId);`,
            ])},`,
            `signature: ${runtimeTemplate.returningFunction(
              'refresh.runtime.createSignatureFunctionForTransform()'
            )},`,
            `runtime: {`,
            webpack.Template.indent([
              `createSignatureFunctionForTransform: ${runtimeTemplate.returningFunction(
                runtimeTemplate.returningFunction('type', 'type')
              )},`,
              `register: ${runtimeTemplate.emptyFunction()}`,
            ]),
            `},`,
          ]),
          `};`,
          `return refresh;`,
        ])}`,
        '',
        `${webpack.RuntimeGlobals.interceptModuleExecution}.push(${runtimeTemplate.basicFunction(
          'options',
          [
            `${declareVar} originalFactory = options.factory;`,
            `options.factory = ${runtimeTemplate.basicFunction(
              ['moduleObject', 'moduleExports', 'webpackRequire'],
              [
                // Our require function delegates to the original require function
                `${declareVar} hotRequire = ${runtimeTemplate.returningFunction(
                  'webpackRequire(request)',
                  'request'
                )};`,
                // The propery descriptor factory below ensures that all properties but $Refresh$ are proxied through to the original require function
                `${declareVar} createPropertyDescriptor = ${runtimeTemplate.basicFunction('name', [
                  `return {`,
                  webpack.Template.indent([
                    `configurable: true,`,
                    `enumerable: true,`,
                    `get: ${runtimeTemplate.returningFunction('webpackRequire[name]')},`,
                    `set: ${runtimeTemplate.basicFunction('value', [
                      'webpackRequire[name] = value;',
                    ])},`,
                  ]),
                  `};`,
                ])};`,
                `for (${declareVar} name in webpackRequire) {`,
                webpack.Template.indent([
                  `if (Object.prototype.hasOwnProperty.call(webpackRequire, name) && name !== "$Refresh$") {`,
                  webpack.Template.indent([
                    `Object.defineProperty(hotRequire, name, createPropertyDescriptor(name));`,
                  ]),
                  `}`,
                ]),
                `}`,
                `hotRequire.$Refresh$ = setup(options.id);`,
                `originalFactory.call(this, moduleObject, moduleExports, hotRequire);`,
              ]
            )};`,
          ]
        )});`,
=======
      const refreshGlobal = getRefreshGlobalScope(webpack.RuntimeGlobals);
      return webpack.Template.asString([
        `${webpack.RuntimeGlobals.interceptModuleExecution}.push(${runtimeTemplate.basicFunction(
          'options',
          [
            `${
              runtimeTemplate.supportsConst() ? 'const' : 'var'
            } originalFactory = options.factory;`,
            `options.factory = function (moduleObject, moduleExports, webpackRequire) {`,
            webpack.Template.indent([
              `${refreshGlobal}.setup(options.id);`,
              'try {',
              webpack.Template.indent(
                'originalFactory.call(this, moduleObject, moduleExports, webpackRequire);'
              ),
              '} finally {',
              webpack.Template.indent([
                `if (typeof Promise !== 'undefined' && moduleObject.exports instanceof Promise) {`,
                webpack.Template.indent([
                  // The exports of the module are re-assigned -
                  // this ensures anything coming after us would wait for `cleanup` to fire.
                  // This is particularly important because `cleanup` restores the refresh global,
                  // maintaining consistency for mutable variables like `moduleId`.
                  // This `.then` clause is a ponyfill of the `Promise.finally` API -
                  // it is only part of the spec after ES2018,
                  // but Webpack's top level await implementation support engines down to ES2015.
                  'options.module.exports = options.module.exports.then(',
                  webpack.Template.indent([
                    `${runtimeTemplate.basicFunction('result', [
                      `${refreshGlobal}.cleanup(options.id);`,
                      'return result;',
                    ])},`,
                    runtimeTemplate.basicFunction('reason', [
                      `${refreshGlobal}.cleanup(options.id);`,
                      'return Promise.reject(reason);',
                    ]),
                  ]),
                  `);`,
                ]),
                '} else {',
                webpack.Template.indent(`${refreshGlobal}.cleanup(options.id)`),
                '}',
              ]),
              '}',
            ]),
            `};`,
          ]
        )})`,
        '',
        getRefreshGlobal(webpack.Template, webpack.RuntimeGlobals, runtimeTemplate),
>>>>>>> 44a0e272c482aa743ebe582559ba22953a336edf
      ]);
    }
  };
}

module.exports = makeRefreshRuntimeModule;
